[
["index.html", "papaja: Reproducible APA manuscripts with R Markdown Preface", " papaja: Reproducible APA manuscripts with R Markdown Frederik Aust &amp; Marius Barth 2019-07-07 Preface This book will be a manual for the R package papaja. It is currently in the process of being written; I’m publishing new sections of the book as I’m writing them. If you have suggestions for improvements or additional topics you would like to see covered, please let me know by opening an issue on GitHub or creating a pull request. papaja has not yet been submitted to CRAN because it is under active development. Currently, there are still a couple of loose ends we would like to tie up before we release the package to a larger audience. If you would like to contribute to speed up the process, have a look at the chapters Limitations and Future directions. If you are interested in reproducible research with R more generally, I recommend the books by Xie (2015) and Gandrud (2013). Furthermore, Stodden, Leisch, &amp; Peng (2014) give an overview of tools, practices, and platforms to implement reproducible research. This manual is fully reproducible and was written in R (Version 3.5.1; R Core Team, 2016) and the R-packages afex (Version 0.24.1; Singmann, Bolker, Westfall, &amp; Aust, 2016), bindrcpp (Version 0.2.2; Müller, 2017), car (Version 3.0.0; Fox &amp; Weisberg, 2011; Fox, Weisberg, &amp; Price, 2018), carData (Version 3.0.1; Fox et al., 2018), citr (Version 0.2.0; Aust, 2016), DiagrammeR (Version 1.0.1; Sveidqvist et al., 2016), dplyr (Version 0.8.0.9013; Wickham &amp; Francois, 2016), ez (Lawrence, 2016), ggplot2 (Version 3.1.1; Wickham, 2009), knitr (Version 1.22; Xie, 2015), lme4 (Version 1.1.17; Bates, Mächler, Bolker, &amp; Walker, 2015), lsmeans (Lenth, 2016), papaja (Version 0.1.0.9842; Aust &amp; Barth, 2016), rmarkdown (Version 1.12; Allaire et al., 2017), shiny (Version 1.3.0; Chang, Cheng, Allaire, Xie, &amp; McPherson, 2016), and wordcountaddin (Marwick, n.d.). Icons are provide royalty ## ─ Session info ────────────────────────────────────────────────────────── ## setting value ## version R version 3.5.1 (2018-07-02) ## os OS X El Capitan 10.11.6 ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_AU.UTF-8 ## ctype en_AU.UTF-8 ## tz Europe/Amsterdam ## date 2019-07-07 ## ## ─ Packages ────────────────────────────────────────────────────────────── ## package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 3.5.0) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 3.5.1) ## backports 1.1.3 2018-12-14 [1] CRAN (R 3.5.0) ## bookdown 0.7 2018-02-18 [1] CRAN (R 3.5.0) ## brew 1.0-6 2011-04-13 [1] CRAN (R 3.5.0) ## callr 3.2.0 2019-03-15 [1] CRAN (R 3.5.2) ## car * 3.0-0 2018-04-02 [1] CRAN (R 3.5.0) ## carData * 3.0-1 2018-03-28 [1] CRAN (R 3.5.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 3.5.0) ## cli 1.1.0 2019-03-19 [1] CRAN (R 3.5.2) ## colorspace 1.4-1 2019-03-18 [1] CRAN (R 3.5.2) ## crayon 1.3.4 2017-09-16 [1] CRAN (R 3.5.0) ## curl 3.3 2019-01-10 [1] CRAN (R 3.5.2) ## data.table 1.12.2 2019-04-07 [1] CRAN (R 3.5.2) ## desc 1.2.0 2018-05-01 [1] CRAN (R 3.5.0) ## devtools 2.0.1 2018-10-26 [1] CRAN (R 3.5.1) ## DiagrammeR * 1.0.1 2019-04-22 [1] CRAN (R 3.5.2) ## digest 0.6.18 2018-10-10 [1] CRAN (R 3.5.0) ## downloader 0.4 2015-07-09 [1] CRAN (R 3.5.0) ## dplyr 0.8.0.9013 2019-04-10 [1] Github (tidyverse/dplyr@92a01d6) ## evaluate 0.13 2019-02-12 [1] CRAN (R 3.5.2) ## forcats 0.4.0 2019-02-17 [1] CRAN (R 3.5.2) ## foreign 0.8-70 2017-11-28 [1] CRAN (R 3.5.1) ## fs 1.2.7 2019-03-19 [1] CRAN (R 3.5.2) ## ggplot2 * 3.1.1 2019-04-07 [1] CRAN (R 3.5.2) ## glue 1.3.1 2019-03-12 [1] CRAN (R 3.5.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 3.5.0) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 3.5.1) ## haven 2.1.0 2019-02-19 [1] CRAN (R 3.5.2) ## hms 0.4.2 2018-03-10 [1] CRAN (R 3.5.0) ## htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.5.0) ## htmlwidgets 1.3 2018-09-30 [1] CRAN (R 3.5.0) ## igraph 1.2.4 2019-02-13 [1] CRAN (R 3.5.2) ## influenceR 0.1.0 2015-09-03 [1] CRAN (R 3.5.0) ## jsonlite 1.6 2018-12-07 [1] CRAN (R 3.5.0) ## knitr 1.22 2019-03-08 [1] CRAN (R 3.5.2) ## lazyeval 0.2.2 2019-03-15 [1] CRAN (R 3.5.2) ## magrittr 1.5 2014-11-22 [1] CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 [1] CRAN (R 3.5.0) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 3.5.0) ## openxlsx 4.1.0 2018-05-26 [1] CRAN (R 3.5.0) ## papaja * 0.1.0.9842 2018-11-01 [1] Github (crsh/papaja@2e11aec) ## pillar 1.3.1 2018-12-15 [1] CRAN (R 3.5.0) ## pkgbuild 1.0.2 2018-10-16 [1] CRAN (R 3.5.0) ## pkgconfig 2.0.2 2018-08-16 [1] CRAN (R 3.5.0) ## pkgload 1.0.2 2018-10-29 [1] CRAN (R 3.5.0) ## plyr 1.8.4 2016-06-08 [1] CRAN (R 3.5.0) ## prettyunits 1.0.2 2015-07-13 [1] CRAN (R 3.5.0) ## processx 3.3.0 2019-03-10 [1] CRAN (R 3.5.2) ## ps 1.3.0 2018-12-21 [1] CRAN (R 3.5.0) ## purrr 0.3.2 2019-03-15 [1] CRAN (R 3.5.2) ## R6 2.4.0 2019-02-14 [1] CRAN (R 3.5.2) ## RColorBrewer 1.1-2 2014-12-07 [1] CRAN (R 3.5.0) ## Rcpp 1.0.1 2019-03-17 [1] CRAN (R 3.5.2) ## readr 1.3.1 2018-12-21 [1] CRAN (R 3.5.0) ## readxl 1.3.1 2019-03-13 [1] CRAN (R 3.5.2) ## remotes 2.0.2 2018-10-30 [1] CRAN (R 3.5.0) ## rgexf 0.15.3 2015-03-24 [1] CRAN (R 3.5.0) ## rio 0.5.10 2018-03-29 [1] CRAN (R 3.5.0) ## rlang 0.3.4 2019-04-07 [1] CRAN (R 3.5.2) ## rmarkdown * 1.12 2019-03-14 [1] CRAN (R 3.5.2) ## Rook 1.1-1 2014-10-20 [1] CRAN (R 3.5.0) ## rprojroot 1.3-2 2018-01-03 [1] CRAN (R 3.5.0) ## rstudioapi 0.10 2019-03-19 [1] CRAN (R 3.5.2) ## scales 1.0.0 2018-08-09 [1] CRAN (R 3.5.0) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.5.0) ## stringi 1.4.3 2019-03-12 [1] CRAN (R 3.5.2) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 3.5.2) ## testthat 2.0.0 2017-12-13 [1] CRAN (R 3.5.0) ## tibble 2.1.1 2019-03-16 [1] CRAN (R 3.5.2) ## tidyr 0.8.3 2019-03-01 [1] CRAN (R 3.5.2) ## tidyselect 0.2.5 2018-10-11 [1] CRAN (R 3.5.0) ## usethis 1.4.0 2018-08-14 [1] CRAN (R 3.5.0) ## viridis 0.5.1 2018-03-29 [1] CRAN (R 3.5.0) ## viridisLite 0.3.0 2018-02-01 [1] CRAN (R 3.5.0) ## visNetwork 2.0.7 2019-05-27 [1] CRAN (R 3.5.2) ## withr 2.1.2 2018-03-15 [1] CRAN (R 3.5.0) ## xfun 0.6 2019-04-02 [1] CRAN (R 3.5.2) ## XML 3.98-1.20 2019-06-06 [1] CRAN (R 3.5.2) ## yaml 2.2.0 2018-07-25 [1] CRAN (R 3.5.0) ## zip 1.0.0 2017-04-25 [1] CRAN (R 3.5.0) ## ## [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library References "],
["introduction.html", "1 Introduction 1.1 Motivation 1.2 Implementation 1.3 Alternatives 1.4 Getting started", " 1 Introduction papaja is short for ‘preparing APA journal articles’ and is the name of this R package designed to create fully reproducible journal articles that seamlessly fuse statistical analyses, simulations, and prose. A manuscript written with papaja can be thought of as an extensively commented analysis script ready for publication in a scientific journal. 1.1 Motivation APA style is one of the major style regimes in academia concerned with written scientific communication and is defined in the Publication Manual of the American Psychological Association (APA; American Psychological Association, 2010). Research in psychology and many fields other, including other social sciences, medicine, and public health is reported in APA style. If you want to publish psychological research, you will have to produce properly formatted APA style manuscripts. While the merits of standardizing scientific reporting are undisputed, mastering the currently 272 pages of Publication Manual’s style definitions puts an undeniable burden on authors. To simplify the writing process researchers have developed strategies to automate the implementation of APA style. The dominant approach to writing scientific reports in psychology is the use of common word processors such as Microsoft Word or Libre Office. Available APA style document templates set up page margins, line spacing, fonts, and related aspects of the manuscript. The format of citations and references can be automated by using references managers that integrate with the word processor, such as Zotero. Far less common in psychology, is the use of markup systems, such as LaTeX or Markdown. A key concept of markup systems is to separate style from content by means of document annotations. These annotations declare portions of text for example as title, section headings, or list items but, crucially, they are agnostic to what this means visually (e.g., &lt;emphasize&gt;text&lt;/emphasize&gt; instead of text). There are several advantages to this approach but, crucially for the present purpose, markup systems compile plain text files to produce the final document. Critically, the compilation process is required for fully reproducible scientific reports. 1.1.1 Reproducible scientific reports Dynamic scientific reports fuse prose and simulation or analysis scripts (Gandrud, 2013; Xie, 2015). Each time a dynamic document is compiled, the scripts are executed anew and the results—statistics, tables, and figures—are recreated and inserted into the document. Thereby dynamic documents allow automated reporting of results, which is currently not possible with the prevalent use of Microsoft Word or Libre Office. Importantly, dynamic documents ensure that the results reported in the manuscript are free of rounding or transcription errors and correspond to the performed analyses. This is the reason why dynamic scientific reports are commonly referred to as reproducible scientific reports or reproducible reports. Thus, the term reproducibility here means that given a dataset and analysis script any analyst obtains the same statistical results (Asendorpf et al., 2013; Cacioppo, Kaplan, Krosnick, Olds, &amp; Dean, 2015). The importance of reproducibility was pinpointed by the U.S. National Science Foundation subcommittee on replicability in science: Reproducibility is a minimum necessary condition for a finding to be believable and informative. (p. 4, Cacioppo et al., 2015) Good statistical practice is fundamentally based on transparent assumptions, repro-ducible results, and valid interpretations. The ethical statistician […] strives to promote transparency in design, execution, and reporting or presenting of all analyses Makes documentation suitable for replicate analyses, metadata studies, and other research by qualified investigators. http://www.amstat.org/asa/files/pdfs/EthicalGuidelines.pdf “an article about a computational result is advertising, not scholarship. The actual scholarship is the full software environment, code and data, that produced the result.” - Buckheit &amp; Donoho, 1995 (Elsevier executable paper challenge: 10.1016/j.procs.2011.04.064) Donoho, D. L., Maleki, A., Rahman, I. U., Shahram, M. &amp; Stodden, V. Reproducible research in computational harmonic analysis. Comput. Sci. Eng. 11, 8–18 (2009). Donoho and fellow researchers have been at the forefront of reproducibility for many years; this a org-mode: http://www.sciencedirect.com/science/article/pii/S0928425711000374?via%3Dihub http://yuyang0.github.io/static/doc/babel.pdf Proprietary software also exists like Inference for R29 – for using R with Microsoft Office – but we do not have any experience with them. Open-source tools like Dexy30 and Sumatra31 are clearly very promising and have capabilities similar to Sweave and org-mode. –&gt; R Markdown has been suggested as one possible framework for reproducible analyses (Allaire et al., 2017). papaja is a R-package in the making including a R Markdown template that can be used with (or without) RStudio to produce documents, which conform to the American Psychological Association (APA) manuscript guidelines (6th Edition). The package uses the document class apa6 and a .docx-reference file, so you can create PDF documents, or Word documents if you have to. Moreover, papaja supplies R-functions that facilitate reporting results of your analyses in accordance with APA guidelines. Markdown is a simple formatting syntax that can be used to author HTML, PDF, and MS Word documents (among others). In the following I will assume you have hopped onto the band wagon and know how to use R Markdown to conduct and comment your analyses. If this is not the case, I recommend you get to grips with R Markdown first. I use RStudio (which makes use of pandoc) to create my documents, but the general process works using any other text editor. Although LaTeX is widely used to write entire manuscripts (not just equations), it is not commonly used in the field of psychology. We suspect that the neglect is largely due to its complexity and shallow learning curve. Both appear to outweigh the advantages of the system when it comes to handling citations and cross-references or typesetting large documents, complex tables, and equations. Markdown paired with pandoc provides a simple interface to harness the power of LaTeX without requiring in-depth knowledge about LaTeX (see Document compilation). 1.2 Implementation In this section we provide a quick overview of the software and the underlying design principles. Unless you are interested in these details it’s safe to skip this section. 1.2.1 Guiding principles In our development of this package our design decisions are based on two guiding principles: papaja documents are convertible. A central motivation for the development of the package was the experience that many (if not most) scientific journals in psychology require that the final version of a submitted manuscript be provided as a Microsoft Word or RTF document. We, thus, strive to employ solutions that work for both LaTeX and Word output formats even if it means that some of the functions are less versatile than they could be. papaja does not compute. The package is meant to facilitate writing reports and manuscripts in APA style; it is not meant to analyse data. Functions provided in this package do as little computing as possible to grant authors maximal analytic flexibility. Moreover, limiting the amount of computing done by the package facilitates package maintenance. While we are guided by these principles, they are guidelines rather than commandments and we deviate from them if necessary. For example, papaja functions do compute statistics that should be routinely reported according to APA guidelines, such as confidence intervals, if they are not provided in the analysis output objects. We, however, try to enable customization and replacement of these defaults whenever we can. 1.2.2 Document compilation It is important to note that papaja builds on several existing R packages, which in turn build on other software, to compile the final document. This layered software design grants the package its capabilities but it comes at a cost: When compilation of a papaja-document throws an error it may not be immediately obvious to an inexperienced user, which part of the process failed. We, thus, provide an overview of the compilation process and the software involved. The compilation process is outlined in Figure 1.1. As detailed in the R Markdown components section, an R Markdown document consists of three components: A YAML front matter that contains document meta data, prose written in markdown (and optionally LaTeX) syntax, and R code in so-called code chunks. Additionally, the R code contained in an R Markdown document usually accesses data that are either stored in a file on the computers hard drive or a database on the local network or internet. When the document is compiled either by calling rmarkdown::render() or by clicking the Knit-button in RStudio, the YAML front matter is parsed. Errors during this processing step are usually due to erroneous YAML syntax and start with Error in yaml::yaml.load(enc2utf8(string), ...) :. Next, the R code inside the R Markdown document is executed sequentially from top to bottom of the document and the resulting output is inserted into the document in markdown syntax. Any figures that are generated during the execution of the R code are stored to the hard drive and embedded into the markdown document. The R code is executed in a new R session with an empty workspace, no attached packages, and with the working directory set to the path of the R Markdown file. If any portion of the R code throws an error the compilation is aborted. In RStudio the debugger will point to the first line of the R code chunk that threw the error—not the exact line responsible for the error—and report the error message. R error messages usually start with Error:, for example, Error: Object 'experiment_data' not found. Figure 1.1: Process diagram illustrating the compilation of reproducible reports written with papaja. Boxes represent input files, diamonds represent compiling software, and ovals represent output files. Dashed components are either implicit (components of R Markdown files) or by default deleted after the compilation and, thus, invisible to the user. After the R code has been executed the bookdown document format pdf_document2() or word_document2(), respectively, provides functions that enable the cross-referencing syntax \\@ref() described in the Cross-referencing section. Incorrect use of the cross-referencing syntax typically does not interfere with the document compilation but is apparent from missing or incorrect cross-references in the compiled document, e.g. instead of a figure number the document may contain the figure handle such as . The result of this processing step is a pure markdown document containing only a YAML header, prose in markdown (and optionally LaTeX) syntax and rendered images in PDF, EPS, PNG, and TIFF formats at 300 dpi as set by apa6_pdf() or apa6_word(), respectively. The markdown document, images and an optional BiB(La)TeX file that contains bibliographic information are the input to the next processing step. rmarkdown::render() assembles a system call to pandoc that is supplemented by papaja to include a call to an additional filter and can be further customized by the user. pandoc parses the contents of the markdown file and translates it into an abstract syntax tree (AST). The pandoc-citeproc filter is than applied to the AST to replace the citation markup by the citation text and insert a reference section. As detailed in the Citations section, pandoc-citeproc relies on the citation styles language (CSL), an XML-based specification of citation and bibliography formatting rules. Unfortunately, CSL does not support in-text citations. To overcome this limitation, pandoc-citeproc provides a separate syntax for in-text citations, which is based on the same CSL style. As a result the CSL APA6 style uses ampersands for all citations, including in-text citations, defying the APA citation style. That is why papaja provides an additional R-based filter that is applied to the AST to replace ampersands in in-text citations with the word and. After all filters have been applied to the AST pandoc converts the document into the target output format, that is, PDF or DOCX. To create DOCX-documents papaja provides a reference DOCX-file containing page setup and style definitions that pandoc uses to create the manuscript file. That is, pandoc translates the AST directly to the office open XML format. To create PDF-documents pandoc in turn relies on LaTeX, that is, pandoc translates the AST to a TeX-file based on a template provided by papaja. This template invokes the apa6 LaTeX document class [@???] and loads several additional LaTeX packages. pandoc then generates a system call to LaTeX to render the PDF document. During this processing step, that is, following the pandoc system calls, errors are due to failures of LaTeX to compile the TeX-file and usually start with !, for example, ! Undefined control sequence. or ! Missing $ inserted. YAML front matter is read Error in yaml::yaml.load(enc2utf8(string), ...) : R code is executed Error: Object 'experiment_data' not found. Gives first line of erroneous R code chunk bookdown adds cross- and text-references No error messages; look for in text Don’t use _ in chunk names! pandoc and pandoc-citeproc convert Markdown Error: pandoc document conversion failed with error 1 pandoc-citeproc: Cannot decode byte '\\xfc' pandoc-citeproc: reference XYZ not found,shows up as ??? in text LaTeX creates a PDF ! Missing $ inserted 1.3 Alternatives Needless to say, not all journals require manuscripts to be prepared according to APA guidelines. Other journal templates for the rmarkdown package are available in the rticles package. It includes a set of templates for authoring of R related journal and conference submissions. papeR reportR &amp; apaStyle Sweave schoRsch (Pfister &amp; Janczyk, 2016) sigr 1.4 Getting started 1.4.1 Software requirements papaja depends on additional software, namely, R 2.11.1 or later and pandoc 1.19 or later If you work with RStudio (1.1.453 or later) pandoc should already be installed, otherwise refer to the installation instructions for your operating system. 1.4.1.1 Setting up a TeX distribution If you want to create PDF- in addition to DOCX-documents you additionally need TeX 2013 or later. If you have no use for TeX beyond rendering R Markdown documents, I recommend you use TinyTex. Otherwise consider MikTeX for Windows, MacTeX for Mac, or TeX Live for Linux. TinyTex can be installed from within R as follows. if(!&quot;tinytex&quot; %in% rownames(installed.packages())) install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() papaja requires additional \\(\\LaTeX\\) packages that are not part of the basic TeX installations. When using TinyTex, the required packages will be installed automatically when rendering a the first PDF-document. Users of other TeX distribution need to take one of the following additional steps. MikTeX users may enable the automatic installation of missing packages. If you are comfortable using the command line, it may be convenient to run the following command. initexmf --set-config-value [MPM]AutoInstall=1 This option is not available in MacTeX or TeX Live. Alternatively, you can install the additional packages manually. Again the installation can be done conveniently from the command line. MikTeX users can run the following command. mpm --install=apa6,booktabs,caption,csquotes,endfloat,environ,etoolbox,fancyhdr,fancyvrb,framed,lineno,microtype,mptopdf,ms,parskip,pgf,sttools,threeparttable,threeparttablex,trimspaces,txfonts,upquote,url,was,xcolor It may be necessary to launch MikTeX console as administrator (right-click and Run as administrator) before executing the command. TeXLive and MacTeX users can run the following command. tlmgr install apa6 booktabs caption csquotes endfloat environ etoolbox fancyhdr fancyvrb framed lineno microtype mptopdf ms parskip pgf sttools threeparttable threeparttablex trimspaces txfonts upquote url was xcolor It may be necessary to first install tlmgr. Alternatively, Ubuntu users can install the following Ubuntu packages: sudo apt-get install texlive-publishers texlive-fonts-extra texlive-latex-extra texlive-humanities lmodern Finally, you may install a complete—not the basic—TeX distribution that comes with all available LaTeX packages but is several gigabytes large. 1.4.2 Installing papaja papaja is not yet available on CRAN but you can install it from GitHub: # Install devtools package if necessary if(!&quot;devtools&quot; %in% rownames(installed.packages())) install.packages(&quot;devtools&quot;) # Install the stable development verions from GitHub devtools::install_github(&quot;crsh/papaja&quot;) # Install the latest development snapshot from GitHub devtools::install_github(&quot;crsh/papaja@devel&quot;) papaja has not yet been submitted to CRAN because it is under active development. Currently, there are still a couple of loose ends we would like to tie up before we release the package to a larger audience. If you would like to contribute to speed up the process, have a look at the chapters Limitations and Future directions. 1.4.3 Creating a document Once you have installed papaja and all other required software, the APA manuscript template is available through the RStudio menus when creating a new R Markdown file, Figure 1.4. Figure 1.4: papaja’s APA6 template is available through the RStudio menues. When you click RStudio’s Knit button (Figure 1.5) papaja, rmarkdown, and knitr work together to create an APA conform manuscript that includes both your manuscript text and the results of any embedded R code. Figure 1.5: The Knit button in the RStudio. If you don’t use RStudio, you can achieve the same result via the R command line. Use rmarkdown::draft() to create a new R Markdown file and rmarkdown::render() to render the document. # Create new R Markdown file rmarkdown::draft( &quot;mymanuscript.Rmd&quot; , &quot;apa6&quot; , package = &quot;papaja&quot; , create_dir = FALSE , edit = FALSE ) # Render manuscript rmarkdown::render(&quot;mymanuscript.Rmd&quot;) papaja is a R-package in the making including a R Markdown template that can be used with (or without) RStudio to produce documents, which conform to the American Psychological Association (APA) manuscript guidelines (6th Edition). The package uses the LaTeX document class apa6 and a .docx-reference file, so you can create PDF documents, or Word documents if you have to. Moreover, papaja supplies R-functions that facilitate reporting results of your analyses in accordance with APA guidelines. Because knitr does not allow duplicate chunk labels in a source document, you need to make sure there are no duplicate labels in your book chapters, otherwise knitr will signal an error when knitting the merged Rmd file. References "],
["r-markdown-components.html", "2 R Markdown components 2.1 YAML front matter 2.2 Body", " 2 R Markdown components Generally, R Markdown files consist of two parts. The first is the YAML front matter that contains the documents meta information and rendering options. It is located at the top of the R Markdown document. The second part is the main body that contains R code chunks and prose in Markdown format. 2.1 YAML front matter YAML is a human-readable and easy to write language to define data structures. You don’t need to familiarize yourself intimately with YAML to use R Markdown or papaja and I suggest you try to just use it. The following is the default YAML front matter; it starts and ends with ---: --- title : &quot;The title&quot; shorttitle : &quot;Title&quot; author: - name : &quot;First Author&quot; affiliation : &quot;1&quot; corresponding : yes # Define only one corresponding author address : &quot;Postal address&quot; email : &quot;my@email.com&quot; - name : &quot;Ernst-August Doelle&quot; affiliation : &quot;1,2&quot; affiliation: - id : &quot;1&quot; institution : &quot;Wilhelm-Wundt-University&quot; - id : &quot;2&quot; institution : &quot;Konstanz Business School&quot; authornote: | Add complete departmental affiliations for each author here. Each new line herein must be indented, like this line. Enter author note here. abstract: | One or two sentences providing a **basic introduction** to the field, comprehensible to a scientist in any discipline. Two to three sentences of **more detailed background**, comprehensible to scientists in related disciplines. One sentence clearly stating the **general problem** being addressed by this particular study. One sentence summarizing the main result (with the words &quot;**here we show**&quot; or their equivalent). Two or three sentences explaining what the **main result** reveals in direct comparison to what was thought to be the case previously, or how the main result adds to previous knowledge. One or two sentences to put the results into a more **general context**. Two or three sentences to provide a **broader perspective**, readily comprehensible to a scientist in any discipline. &lt;!-- https://tinyurl.com/ybremelq --&gt; keywords : &quot;keywords&quot; wordcount : &quot;X&quot; bibliography : [&quot;r-references.bib&quot;] floatsintext : no figurelist : no tablelist : no footnotelist : no linenumbers : yes mask : no draft : no documentclass : &quot;apa6&quot; classoption : &quot;man&quot; output : papaja::apa6_pdf --- 2.1.1 Manuscript metadata Most of the information contained in the YAML front matter is information about the document. YAML field Metadata author list of author information (e.g., name and affiliation;start each new author with -) affiliation list of institutional information (id and institution) authornote automatically contains corresponding author line keywords article keywords wordcount article word count note text to add above author note on the title page(e.g. “Preprint submitted for publication”) title is the full name of the manuscript that is printed on the title page and at the beginning of the introduction. shorttitle is a short variant of the title and is printed in the running head on every page. author is a structured list. Each author’s information is given in a separate element that is indented and starts with -. A full name and an affiliation symbol need to be provided for every author. The symbol is printed as superscript following the author’s name on the manuscripts title page and can be a combination of multiple symbols if the author has multiple affiliations (e.g., 1,2 yields Ernst-August Doelle1,2). Exactly one author has to be declared as corresponding author by adding corresponding: yes and the fields address and email to the author’s information. The latter two fields are used to automatically generate the last sentence of the author note that—as required by the APA guidelines—provides the corresponding author’s contact information. affiliation is another structured list that contains the institutions’ information; again each new element is indented and starts with -. id is printed as superscript in front of the institution name below the author names on the title page (e.g., 2 yields 2 Konstanz Business School). author_note and abstract contain the text for the corresponding sections of the manuscript. The | indicate that all following indented lines, including line breaks and new paragraphs, belong to this field. Thus, abstract and author_note can be structured into multiple paragraphs as shown above. keywords and wordcount1 are self-explanatory and the corresponding information is printed below the abstract on the second page of the manuscript. bibliography contains a list of one or more Bib(La)TeX files that contain the references cited in the manuscript. Additional files can be added by appending them to the list separated by commata, e.g. bibliography: [&quot;my_bib1.bib&quot;, &quot;my_bib2.bib&quot;]. By default, papaja assumes that you will cite R and all R packages used for the analysis and that the corresponding bibliographic information is contained in r-references.bib. See Citations for instructions on how to automate the citation of R packages. note is an add additional metadata field that are not part of the default YAML front matter. It’s contents is printed on title page in between author information and the author note; it can be used to add remarks, such as “Preprint submitted to peer-review on June, 29th, 2016”. 2.1.2 Rendering options The first set of rendering options breaks with the guiding principal that papaja is convertible because they have no effect on Microsoft Word documents. We decided to implement these options nonetheless because they are required by some journals and can be used for submissions where (initially) PDF/LaTeX documents are accepted. YAML field Effect mask Omit identifying information from the title page appendix List of R Markdown files to include as appendices linenumbers* Add line numbers in the margins draft* Add “DRAFT” watermark across all pages floatsintext* Place figures and tables in the text rather than at the end figurelist*tablelist*footnotelist* Create lists of figure captions, table captions, or footnotes classoptions* control the style of the document(e.g., man or doc, see apa6 \\(\\LaTeX\\) class options) * Only available for PDF documents floatsintext indicates whether figures and tables are to be positioned at the end of the document—as required by APA guidelines—or included in the body of the document. If figurelist, tablelist, or footnotelist are set to yes lists of figure captions, table captions, or footnotes are created and placed after the reference section. linenumbers indicates whether lines should be continuously numbered throughout the manuscript. The remaining rendering options affect both PDF and Microsoft Word documents. mask can be set to yes to prepare the manuscript for double-blind peer review by removing author names, affiliations, and author note from the title page. class defines the layout style of the manuscript. Setting class to man produces the default APA manuscript style, doc produces a more typical document (single-spaced, single-column). The latter option is, however, currently not available for Microsoft Word documents. The output field determines the type of document that is created and can be either papaja::apa6_pdf or papaja::apa6_word. Additional arguments can be passed to these functions, e.g. to delete the LaTeX source file after the PDF has been rendered (see ?apa6_pdf for details): output: papaja::apa6_pdf: keep_tex: FALSE Extend bookdown::pdf_document2() and bookdown::word_document2() Options of these functions should also work for papaja documents 2.1.2.1 Additional rendering options Any additional rendering options supported by rmarkdown::pdf_document() or rmarkdown::word_document() can be added to the YAML front matter. For example, a different citation style can be used by setting csl to the location of a CSL style definition file. For an overview refer see the list of default variables, language variables, and LaTeX variables supported by pandoc and the filter modes supported by pandoc-citeproc. papaja provides one additional rendering option that is not included in the default YAML header. replace_ampersands indicates whether to replace &amp; by and in all in-text citations as required by the APA citation style. The option defaults to yes if no custom CSL file is specified but to no otherwise. To replace ampersands in in-text citations with a custom CSL file add replace_ampersands: yes to the YAML front matter. 2.2 Body The body of R Markdown documents consists of prose written in Markdown interspersed with R code. 2.2.1 Markdown A general principle in typesetting is to separate content and style. Separation is commonly achieved through the use of a markup language, which is a system of document annotations. These annotations declare portions of text as, for example, title, section headings, or list items but, crucially, they are agnostic to what this means visually (e.g., **text** instead of text). Separation of content and style is useful because it enables swift changes to an entire documents’ style or structure and facilitates applying a common style across multiple documents. Microsoft Word implements this strategy in their so-called styles, which are collections of formatting instructions that can be assigned to portions of the text. papaja uses the Markdown syntax to separate content and style. Markdown was desigend to be an easy-to-read and -write formatting syntax. The key design goal was to create a syntax that is readable as-is. The following is an excerpt from the APA example manuscript written in Markdown. # Methods ## Participants Younger adults (14 women, 10 men, $M_{age} = 19.5$ years, age range: 18–22 years) were recruited with flyers posted on the Boston College campus. &lt;!–– TODO: Add flyer to appendix! ––&gt; Older adults (15 women, nine men, $M_{age} = 76.1$ years, age range: 68–84 years) were recruited through the Harvard Cooperative on Aging (see Table 1, for demographics and test scores).[^p] [^p]: Analyses of covariance were conducted with these covariates,with no resulting influences of these variables on the pattern or magnitude of the results. Without any prior knowledge of Markdown it should be easy to guess what most of this syntax does: # and ## denote first and second order section headings (and so on), &lt;!-- and --&gt; surround comments that will not be displayed in the rendered document, and [^p] adds a reference to a footnote that is written out following [^p]:. The equations surrounded by $ may be somewhat less intuitive. In R Markdown, equations are written in LaTeX’s powerful mathematics syntax (also see Equations). For an overview of the Markdown syntax see Markdown text formatting. 2.2.2 R code There are two ways to include R code in R Markdown documents. The primary method is to use so-called code chunks. ```{r, code-chunk, echo = FALSE} age_mean &lt;- mean(demographics$age) ``` Code chunks are surrounded by ``` and should be preceeded and followed by an empty line. The behavior of code chunks can be controlled by passing comma-separated options surrounded by braces to the chunk. The first option is compulsory and specifies what langauge the code chunk contains and usually be r, but other languages, such as python, stan, or SQL are supported. RStudio’s knitr language engines documentation provides an overview of all supported languages. The second option of a code chunk is its label or name, here code-chunk. It is good practice to provide a meaningful name for each chunk because chunk names briefly describe the following codes purpose and, hence, are a means of structuring and documenting the code serve as meaningful names for graphic files that the chunks produce are required to control when the code of a cached chunk has to be rerun because a preceeding chunk has changed (see Caching expensive computations). By default, papaja sets the chunk options echo = FALSE and message = FALSE for all chunks. echo = FALSE means that the code chunk is run but hides the code and message = FALSE hides any messages generated by the code so that they are not included in the manuscript. Both settings can be overwritten if desired. See the knitr chunk options and package options for a overview of available settings. R code can also be inserted into in a line of text, for example `r mean(demographics$age)`. Writing R code inline is a convenient way of reporting results of computations in the running text. For example, the mean and standard deviation of participants’ age are stored in variables named age_mean and age_sd. These numbers can be reported by printing the variables in inline R code. Participants mean age was `r age_mean` years ($SD = `r age_sd`$). As in any other R script, R code is executed from top to bottom. Thus, any variables that are called in code chunks or inline R code must be defined above. Reporting numerical values frequently requires some formatting, such as rounding or filling with trailing zeros (e.g., 24.10). In the section Numerical values, we provide an overview of papaja functions that can be used to easily format simple numbers or results from statistical analyses according to APA guidelines. We hope to automate the word count in the future. For now, we recommend using the wordcountaddin package (Marwick, n.d.) to count the words in R Markdonw documents. Note, that counting words in R Markdown documents may underestimate the word count in the final document because the R Markdown document does not include the properly formatted citations and does not contain the results of analyses. An alternative approach is to use the texcount command line tool on the TeX-file generated by papaja::apa6_pdf().↩ "],
["writing.html", "3 Writing 3.1 Markdown text formatting 3.2 Citations 3.3 Equations 3.4 Cross-referencing 3.5 Appendices", " 3 Writing RStudio Section overview Spell check 3.1 Markdown text formatting A comprehensive overview of the supported Markdown syntax is provided by RStudio’s R Markdown documentation. 3.2 Citations If you are not already using a reference manager, such as Zotero, I strongly suggest you start doing so. Reference managers are like iTunes for your literature; they help you search, download, and organize papers. Most importantly, with a few clicks you can export a collection of references you need for a paper into a .bib-file. By default, citations in R Markdown are formatted by pandoc-citeproc, a filter that pandoc applies as it renders the final document. The advantage of using pandoc-citeproc is that it works equally well for both PDF and Microsoft Word documents. To start citing, supply a Bib(La)TeX (or for example EndNote, RIS, Medline) file to the bibliography parameter in the YAML front matter (bibliography: my.bib). Once the R Markdown file knows where to look for reference [@james_1890] will create a citation within parentheses (James, 1890). Multiple citations must be separated by ; (e.g., [@james_1890; @bem_2011]) and are ordered alphabetically as per APA style (Bem, 2011; James, 1890). To cite a source in text simply omit the brackets; for example, write @james_1890 to cite James (1890). Citation type Syntax Rendered citation Citation within parentheses [@james_1890] (James, 1890) Multiple citations [@james_1890; @bem_2011] (Bem, 2011; James, 1890) In-text citations @james_1890 James (1890) Year only [-@bem_2011] (2011) Additional information can be added to citations as pre- or postfixes. Pre- and postfixes can simply be added to each citation by writing inside the brackets ([e.g., @bem_2011]). Note that pre- and postfixes are bound to the enclosed citation, not to the set of all citations. Hence, a prefix will be reorder together with its citation, which may be undesirable. For example, [e.g., @james_1890; @bem_2011] yields (e.g., James, 1890; Bem, 2011). There is no way to prevent this behavior, so mind the alphabetical order of citations. Further customizations, such as citing only a publications year ([-@bem_2011]) are available, see RStudio’s overview of the R Markdown citation syntax. If you are not interested in creating Microsoft Word documents it’s possible to use NatBib or Bib(La)TeX for reference formatting, which grant a little more flexibility than pandoc-citeproc. To do so, an additional argument has to be supplied to apa6_pdf(): --- output: papaja::apa6_pdf: citation_package: biblatex --- 3.2.1 Citation styles The citation style is automatically set to APA style. Other styles can be set in the YAML front matter by specifying a CSL, or Citations Style Language, file. You can use either one of the large number of existing CSL files, customize an existing CSL file, or create a new one entirely. To change the citation style, add a csl: mystyle.csl to the YAML front matter. See the R Markdown documentation and Citation Style Language for further details. --- csl: mystyle.csl --- 3.2.2 Works ‘in press’ Bibliographic entries that are missing the year field will be rendered without a date. For example, the following entry in the bibliography file will be printed as Aust &amp; Barth (n.d.). @article{R-papaja, author = {Frederik Aust and Marius Barth}, title = {{papaja}: {Create} {APA} manuscripts with {R Markdown}} } When refering to works that are missing a date because they are not yet published (e.g., works that are under review or accepted for but awaiting publication), the publication state can be included in the citation and reference via the pubstate field: @article{R-papaja, author = {Frederik Aust and Marius Barth}, title = {{papaja}: {Create} {APA} manuscripts with {R Markdown}}, pubstate = {in press} } Now, this entry will be printed as Aust &amp; Barth (in press). 3.2.3 Conveniently inserting citations with citr citr is an R package that provides functions to search Bib(La)TeX-files to create and insert formatted Markdown citations into the current document. If you use RStudio, the package supplies an easy-to-use RStudio add-in that facilitates inserting citations (Figure 3.1). The references for the inserted citations are automatically added to the documents reference section. Figure 3.1: Demonstration of the RStudio addin from the citr package that inserts R Markdown citations. Once citr is installed (install.packages(&quot;citr&quot;)) and you have restarted your R session, the addin appears in the menus and you can define a keyboard shortcut to call the addin (we suggest Alt+Shift+R). The addin will automatically look up the Bib(La)TeX-file(s) specified in the YAML front matter. If the document does not contain a YAML front matter the addin will attempt to locate a parent document and look up the Bib(La)TeX-file specified therein. That is, the addin works its automagic even if you edit R Markdown documents that are included in another R Markdown document (see Splitting an R Markdown document). The expected names of a parent document default to c(&quot;index.Rmd&quot;, &quot;master.Rmd&quot;), but those can be customized (e.g., options(citr.parent_documents = &quot;my_parent.Rmd&quot;)). citr can also be used without RStudio, albeit it is less convenient. The following call searches a Bib(La)TeX-file and creates formatted Markdown citations for the results. library(&quot;citr&quot;) md_cite(&quot;bem&quot;, bib_file = &quot;references.bib&quot;) md_cite() searches the author, year, title, and journal fields of your references. 3.2.3.1 Working with a reference manager If you use Zotero or Juris-M citr can access your reference database without previous export. For this to work, you need to install the Better Bib(La)TeX extension, which we recommend even if you don’t intend to use citr. Once the extension is installed and the reference manager is running, citr will automatically access all your references and keep the Bib(La)Tex-file specified in the current R Markdown file up-to-date. If you dislike this behavior, you can disable the automatic access to the reference manager by setting options(citr.use_betterbiblatex = FALSE). 3.2.4 Meta-analysis references When reporting meta-analyses APA guidelines require that studies included in the meta analysis are included in the reference section and preceeded by an asterisk (p. 138, American Psychological Association, 2010). There are two approaches to mark meta-analysis references. First, we have created a variant of the widely available APA CSL file that enables adding the required asteriskes. To use this variant insert the following into YAML front matter. csl: https://tinyurl.com/apa6-meta-analysis Alternatively, you can download the file and use the location on your hard drive instead of the above URL. Now any refernces that has an annotation field will be preceeded by an asterisk. @article{aust_memory-based_2018, author = {Aust, Frederik and Haaf, Julia M. and Stahl, Christoph}, title = {A Memory-Based Judgment Account of Expectancy-Liking Dissociations in Evaluative Conditioning.}, date = {2018}, journaltitle = {Journal of Experimental Psychology: Learning, Memory, and Cognition}, doi = {10.1037/xlm0000600}, annotation = {meta-analysis} } To include references that are not explicitly cited in the paper, you can use the nocite field of the YAML front matter. --- nocite: @aust_memory-based_2018 --- Finally, the APA guidelines require a note at the start of the reference section that explains what an asterisk means. This note can be added at the end of the document as follows. \\begingroup \\setlength{\\parindent}{-0.5in} \\setlength{\\leftskip}{0.5in} References marked with an asterisk indicate studies included in the meta-analysis. &lt;div id = &quot;refs&quot;&gt;&lt;/div&gt; \\endgroup Second, if you prefer \\(\\LaTeX\\) to generate the bibliographic information, we recommend you use biblatex-apa by adding the following to the YAML front matter. biblio-style : &quot;apa&quot; output: papaja::apa6_pdf: citation_package: biblatex Additionally, you need to define a language mapping and to define a custom \\(LaTeX\\) command that can be used to add meta-analysis references. header-includes: - \\DeclareLanguageMapping{english}{english-apa} - \\DeclareBibliographyCategory{asterisk} - \\renewbibmacro*{begentry}{\\ifcategory{asterisk}{\\ensuremath{\\ast}}{}} - \\newcommand*{\\nocitemeta}[1]{\\nocite{#1}\\addtocategory{asterisk}{#1}} In the document you can use this custom command to add meta-analysis references. \\nocitemeta{aust_memory-based_2018} No entry in the annotation field of the reference is required. As usual, any non-meta-analysis citation can be added using the pandoc-citeproc syntax, e.g. [@R-papaja]. The note that explains what an asterisk means can be added at the end of the document as follows. \\defbibnote{asterisk}{References marked with an asterisk indicate studies included in the meta-analysis.} \\printbibliography[title=References,prenote=asterisk] \\renewcommand{\\printbibliography}{} 3.2.5 Citing R and its packages A lot of R packages are developed by academics free of charge. As citations are the currency of science, it’s easy to compensate volunteers for their work by citing the R packages we use. Howerver, citing software is rarely done arguebly because it is tedious work. papaja therefore supplies two functions that make citing R and its packages easy. r_refs(file = &quot;r-references.bib&quot;) my_citations &lt;- cite_r(file = &quot;r-references.bib&quot;) r_refs() creates a BibTeX file containing citations for R and packages that are in use at the time the function is executed. cite_r() takes these citations and turns them into readily reportable text. my_citations now contains the following text that you can use in your document: R (Version 3.5.1; R Core Team, 2016) and the R-packages afex (Version 0.24.1; Singmann et al., 2016), bindrcpp (Version 0.2.2; Müller, 2017), car (Version 3.0.0; Fox &amp; Weisberg, 2011; Fox et al., 2018), carData (Version 3.0.1; Fox et al., 2018), citr (Version 0.2.0; Aust, 2016), DiagrammeR (Version 1.0.1; Sveidqvist et al., 2016), dplyr (Version 0.8.0.9013; Wickham &amp; Francois, 2016), estimability (Lenth, 2015), ez (Lawrence, 2016), ggplot2 (Version 3.1.1; Wickham, 2009), knitr (Version 1.22; Xie, 2015), lme4 (Version 1.1.17; Bates et al., 2015), lsmeans (Lenth, 2016), Matrix (Version 1.2.14; Bates &amp; Maechler, 2016), papaja (Version 0.1.0.9842; Aust &amp; Barth, 2016), reshape2 (Version 1.4.3; Wickham, 2007), rmarkdown (Version 1.12; Allaire et al., 2017), shiny (Version 1.3.0; Chang et al., 2016), and wordcountaddin (Marwick, n.d.) If you prefer to cite only a subset of these packages, package names can be specified either as a blacklist, so they won’t be cited (withhold = TRUE), or as a whitelist, so only these packages will be cited (withhold = FALSE). my_citations &lt;- cite_r( file = &quot;r-references.bib&quot; , pkgs = c(&quot;afex&quot;, &quot;lsmeans&quot;, &quot;papaja&quot;) , withhold = FALSE ) R (Version 3.5.1; R Core Team, 2016) and the R-packages afex (Version 0.24.1; Singmann et al., 2016), lsmeans (Lenth, 2016), and papaja (Version 0.1.0.9842; Aust &amp; Barth, 2016) Another option is to cite R in text but move the list of R packges into a footnote. my_citations &lt;- cite_r(file = &quot;r-references.bib&quot;, footnote = TRUE) This way you can reference R in the running text using my_citations$r and place the footnote syntax including the package list my_citations$pkgs in a new paragraph. R (Version 3.5.1; R Core Team, 2016)2 3.3 Equations If you need to report formulas, you can use the flexible \\(\\LaTeX\\) syntax (it will work in Word documents, too). Inline math must be enclosed in $ or \\( and \\) and the result will look like this: \\(d&#39; = z(\\mathrm{H}) - z(\\mathrm{FA})\\). For larger formulas displayed equations are more appropriate; they are enclosed in $$ or \\[and \\], \\[ d&#39; = \\frac{\\mu_{old} - \\mu_{new}}{\\sqrt{0.5(\\sigma^2_{old} + \\sigma^2_{new})}}. \\] 3.4 Cross-referencing papaja builds on the document formats pdf_document2() and word_document2() from the bookdown package. This enables the use of bookdown cross-referencing syntax including automatically generated table and figure labels as detailed in the bookdown documentation. To cross-reference figures and tables use \\@ref(fig:chunk-label) or \\@ref(tab:chunk-label) Only works if chunk labels don’t contain _ Precede by non-breaking spaces, e.g.Figure\\ \\@ref(fig:chunk-label) 3.5 Appendices Appendices should be in a separate file(e.g., appendix.Rmd) One level-1 heading No YAML front matter --- appendix: &quot;appendix.Rmd&quot; --- – The R code is executed after the main document; all packages and variables from the main document should be available. Multiple appendices are possible --- appendix: - &quot;appendix_a.Rmd&quot; - &quot;appendix_b.Rmd&quot; --- References "],
["reporting.html", "4 Reporting 4.1 Numerical values 4.2 Figures 4.3 Tables 4.4 Results from statistical tests 4.5 Caching expensive computations", " 4 Reporting Using papaja, it is possible to run all your analyses from within an R Markdown document. Any output from R is included as you usually would using R Markdown. By default the R code will not be displayed in the final documents. If you wish to show off your code you need to set echo = TRUE in the chunk options. This section describes how you can include the results of your analyses can be included in text. It starts with simple numerical values (like a sample mean) and then continues with more-complex output, like figures, tables, and the results from statistical models and hypothesis tests. 4.1 Numerical values Consider a basic example, where you want to include a mean and a standard deviation into text: printnum() can be used to include numeric values in the text. The function performs the rounding and optionally omits leading zeros in accordance with APA guidelines: Participants mean age was `r printnum(age_mean)` years ($SD = `r printnum(age_sd)`$). The above line is rendered as follows: Participants mean age was 22.84 years (\\(SD = 3.78\\)). printnum() is quiet flexible and passes its arguments to the underlying base function formatC() (CAVE: We are currently considering to switch to format().), so changing the number of digits after the decimal point or the character to be used to indicate the decimal point (e.g., from a point &quot;.&quot; to a comma &quot;,&quot;) is always possible. papaja automatically applies printnum() to any numbers that a printed in inline code chunks. Hence, `r age_mean` and `r printnum(age_mean)` are effectively identical and both yield “22.84”. papaja additionally provides a shorthand version of printnum(), namely printp(), with defaults for correct typesetting of \\(p\\) values (e.g., \\(p &lt; .001\\) instead of \\(p = 0.000\\)). Typeset numerical values for greater control - printnum() - printp() as shorthand for p values printnum(c(143234.34557, Inf)) ## [1] &quot;143,234.35&quot; &quot;$\\\\infty$&quot; printnum(42L, numerals = FALSE, capitalize = TRUE) ## [1] &quot;Forty-two&quot; printp(c(1, 0.0008, 0)) ## [1] &quot;&gt; .999&quot; &quot;.001&quot; &quot;&lt; .001&quot; 4.2 Figures As in any R Markdown document, you can include figures in your document. Figures can either consist of plots generated in R or external files. In accordance with APA guidelines, figures are not displayed in place but are deferred to the final pages of the document. To change this default behavior set the option figsintext in the YAML front matter to yes. Figures are saved as 300 dpi PDF and PNG e.g., my_manuscript_figures/figure-latex/chunk-name-1.pdf Change defaults using chunk options (dev and dpi) 4.2.1 R-generated figures Any plot that is generated by an R code chunk is automatically included in your document. Hence, a simple call to plot() is sufficient to create a figure: (ref:simple-base-plot) A basic scatterplot of the cars dataset. plot(cars) Figure 4.1: (ref:simple-base-plot) Figure display size, resolution, file format and many other things can be controlled by setting the corresponding chunk options. Refer to the plot-related knitr chunk options for an overview of all options. In papaja-documents, by default, all figures as saved as vectorized PDF and pixel-based PNG files at a resolution of 300 DPI, which should in most cases be sufficient for print publication. When the target document format is PDF the vectorized PDF files are included; when the target document format is DOCX the pixel-based PNG files are included. The files can be found in the mydocument_files folder that is generated when mydocument.Rmd is knitted. Note, if you define transparent colors in your plots (e.g., when you defining colors using rgb()), the rendered document will always display the pixel-based PNG files, regardless of the target document format. Given the lossless compression in PNG and the decent resolution of 300 DPI this should not be a problem in print. 4.2.1.1 papaja plot functions Factorial designs are ubiquotous in experimental psychology but notoriously cumbersome to visualize with R base graphics. That is why papaja provides a set of functions to facilitate plotting data from factorial designs. The functions apa_beeplot(), apa_lineplot(), apa_barplot(), and the generic apa_factorial_plot() are intended to provide a convenient way to obtain a publication-ready figure while maintaining enough flexibility for customization. The basic arguments to these functions are all the same, so you only need to learn one syntax to generate different types of plots. Moreover, it is easy switch between the different types of plots by changing the name of the called function. Consider the following example of a so-called beeswarm plot: (ref:beeswarm-caption) An example beeswarm plot. Small points represent individual observations, large points represent condition means, and error bars represent 95% confidence intervals. apa_beeplot( data = mixed_data , id = &quot;Subject&quot; , dv = &quot;Recall&quot; , factors = c(&quot;Task&quot;, &quot;Valence&quot;, &quot;Dosage&quot;) ) Figure 4.2: (ref:beeswarm-caption) A data.frame that contains the data in long format is passed to the data argument. The other arguments expect the names of the columns that contain the subject identifier id, the dependent variable dv, and the between- or within-subjects factors of the design. Currently, zero to four factors are supported. For each cell of the design, the functions plot central tendency, dispersion, and names of dependent variable, factors and levels, and optionally a legend. Mesures of central tendency and dispersion default to the mean and 95% confidence intervals. However, the arguments tendency and dispersion can be used to overwrite these defaults and plot other statistics. For example, to plot within-subject rather than between-subject confidence intervals you can set dispersion = within_subjects_conf_int. If the data encompass multiple observations per participant-factor-level-combination, these observations are aggregated. By default, the condition means are computed but you can specify other aggregation functions via the fun_aggregate argument. The visual elements of the plots can be customized by passing options to the arguments args_points, args_error_bars, args_legend, and so on. These arugments take named lists of arguments that are passed on to the respective graphics functions, such as points(), arrows(), and legend(). Consider the following code and the resulting Figure 4.3 for a customized version of the previous beeswarm plot. (ref:customized-plot-caption) A customized beeswarm plot. Note that, by default, the swarm inherits parameters from the args_points argument. Small points represent individual observations, large points represent means, and error bars represent 95% within-subjects confidence intervals. apa_beeplot( data = mixed_data , id = &quot;Subject&quot; , dv = &quot;Recall&quot; , factors = c(&quot;Task&quot;, &quot;Valence&quot;, &quot;Dosage&quot;) , dispersion = within_subjects_conf_int , main = c(expression(italic(A)~&quot;dosage&quot;), expression(italic(B)~&quot;dosage&quot;), expression(italic(C)~&quot;dosage&quot;)) , ylab = &quot;Number of correctly recalled words&quot; , args_points = list(cex = 2, bg = c(&quot;skyblue4&quot;, &quot;indianred3&quot;, &quot;seagreen4&quot;), col = &quot;white&quot;) , args_swarm = list(cex = 1.2) , args_error_bars = list(length = 0.02, col = &quot;grey20&quot;) , args_legend = list(x = &quot;bottom&quot;, inset = 0.05) , args_y_axis = list(las = 1) ) Figure 4.3: (ref:customized-plot-caption) Utilize variable labels These plot functions also utilize variable labels, with some \\(\\LaTeX\\) math support (see ?latex2exp::TeX) variable_labels(cosmetic_surgery) &lt;- c( Post_QoL = &quot;Quality of life post surgery ($\\\\bar{x}_{post}$)&quot; ) apa_beeplot( id = &quot;ID&quot; , dv = &quot;Post_QoL&quot; , factors = c(&quot;Reason&quot;, &quot;Surgery&quot;, &quot;Gender&quot;) , data = cosmetic_surgery # , ylab = &quot;Quality of life post surgery&quot; , las = 1 , args_legend = list(x = 0.25, y = 30) , args_points = list(bg = c(&quot;skyblue2&quot;, &quot;indianred1&quot;)) , args_error_bars = list(length = 0.03) ) 4.2.1.2 Setting global plot options As noted in the APA guidelines (p. 153) figures in an article should be consistent and in the same style. Hence, it is desireable to define plot styles once rather than every time a new plot is created. When using graphics plot functions global options can be set using par(). For example, the size of labels and symbols can be controled with cex: (ref:par-in-chunk) A variant of the example beeswarm plot with larger labels and symbols. par(cex = 1.2) apa_beeplot( data = mixed_data , id = &quot;Subject&quot; , dv = &quot;Recall&quot; , factors = c(&quot;Task&quot;, &quot;Valence&quot;) ) Figure 4.4: (ref:par-in-chunk) However, the use of par() is restricted in knitr. By default, knitr resets par() for every chunk; par() needs to be called anew in every chunk that creates a plot. While there are advantages to this behavior it impedes defining a consistent plot style. Although not very convenient, it is possible to set global plot options in knitr and therefore also in papaja. The following example illustrates how to make knitr execute a specified call to par() before executing code in a given chunk. Here we rotate the \\(y\\)-axis label (las = 1), sets a regular font and increases the size of the main title (font.main = 1, cex.main = 1.05). # Ensure that par()-settings are retained across chunks knitr::opts_knit$set(global.par = TRUE) # Define a function that sets desired global plot defaults par(font.main = 1`, `cex.main = 1.05, las = 1) The customizations apply to all subsequently generated plots. It is, thus, advisable to add this code at the top of the R Markdown document shortly after the YAML front matter. These same limitations do not apply to users of ggplot2. Custom themes can be set as default as usual and are subsequently applied to all plots created with ggplot(). papaja provides a template theme_apa() that we feel is well suited to create publication-ready plots. The following example demonstrates how to set a default theme. # Cosmetic surgery dataset from # Field, A. P., Miles, J., &amp; Field, Z. (2012). Discovering statistics using R. London: Sage. load(&quot;data/cosmetic_surgery.rdata&quot;) ggplot( cosmetic_surgery , aes(x = Base_QoL, y = Post_QoL, color = Reason) ) + geom_point() + geom_smooth(method = &quot;lm&quot;) + labs( x = &quot;Baseline quality of life&quot; , y = &quot;Quality of life post surgery&quot; ) + scale_color_brewer(palette = &quot;Set1&quot;) + theme_apa(box = TRUE) + theme(legend.position = c(0.2, 0.8)) theme_set(theme_apa()) 4.2.2 External files … 4.2.3 Figure captions The chunk option fig.cap sets a figure caption. In principle, it is possible to define a figure caption simply by passing a character string to fig.cap. However, we strongly recommend that you use text references—a feature of the bookdown package—instead. A text reference consist of a unique label and the corresponding text that it represents. Text references can be defined as follows: (ref:my-figure-caption) This is a figure caption for my figure. The text reference can now be inserted in the chunk options (or anywhere else), e.g. fig.cap = &quot;(ref:my-figure-caption)&quot;. The use of text references has several advantages: The use of Markdown and \\(\\LaTeX\\) syntax is not well supported in fig.cap. For example, \\ and _ must be escaped to prevent either R or \\(\\LaTeX\\) from erroring. Moreover, Markdown formatting and citation syntax is not supported at all. None of these limitations apply to text references. Long figure captions can impair the readability of the document when they are added directly to the chunk options. Text references are subject to RStudio spell checking, whereas the contents of fig.cap is not. Changing text reference does constitute a change to the code chunk and hence does not cause the cache of a chunk to be discarded. Text references can include inline code chunks. We recommend to define the text reference for a figure caption just above the corresponding code chunk. The figure caption defined in fig.cap is used for all figures that are created in the respective chunk. If multiple figures are created the caption will be duplicated. Unless this behavior is desired, only one figure should be created per chunk. Caption is used for every figure in chunk Only one figure per chunk Combine multiple plots into one figure (e.g., layout()) If a given figure is tall or the figure caption is extensive, it may flow of the page of a PDF document. There are two approaches to accomodate long figure captions or tall figures. You can adjust the line spacing/font size of the caption or use a separate list of figure captions. 4.2.3.1 Line spacing and font size As mentioned Adjusting line spacing, you can adjust the line spacing but also the font size of figure captions. For single-spaced script-size figure captions, add the following to the YAML front matter: header-includes: - \\usepackage{setspace} - \\captionsetup[figure]{font={stretch=1,scriptsize}} For other font size options see the LaTeX Wikibook. 4.2.3.2 List of figure captions To add a list of figure captions after the reference section, add the following to the YAML front matter: figurelist: yes Additionally you can suppress the captions below all figures by adding LaTeX code to the document preamble: header-includes: - \\captionsetup[figure]{textformat=empty} If you would rather suppress figure captions only where necessary you can instead use knitr to do this. To remove the caption below a figure set fig.cap = &quot; &quot; and instead set the figure short caption via the chunk option fig.scap = &quot;My figure caption&quot;: (ref:figure-caption) This is a long figure caption! ```{r fig.cap = &quot; &quot;, fig.scap = &quot;(ref:figure-caption)&quot;, out.width = &quot;\\\\textwidth&quot;} plot(cars) ``` To ensure that fig.scap takes effect, knitr requires that the chunk specifies out.width, out.height, or fig.align, as explained here. 4.3 Tables For prettier tables, I suggest you try apa_table(), which builds on knitr’s kable(). library(dplyr) # this was not previously loaded but here is probably not the best place in the manual descriptives &lt;- mixed_data %&gt;% group_by(Dosage) %&gt;% summarize( Mean = mean(Recall) , Median = median(Recall) , SD = sd(Recall) , Min = min(Recall) , Max = max(Recall) ) descriptives[, -1] &lt;- printnum(descriptives[, -1]) apa_table( descriptives , caption = &quot;Descriptive statistics of correct recall by dosage.&quot; , note = &quot;This table was created with apa_table().&quot; , escape = TRUE ) Table 4.1: Descriptive statistics of correct recall by dosage. Dosage Mean Median SD Min Max A 14.19 14.00 4.45 5 25 B 13.50 14.00 5.15 4 22 C 19.19 19.00 3.52 13 25 Note. This table was created with apa_table(). Of course popular packages like xtable3 or tables can also be used to create tables when knitting PDF documents. These packages, however, cannot be used when you want to create Microsoft Word documents because they rely on \\(\\LaTeX\\) for typesetting. apa_table() creates tables that conform to APA guidelines and are correctly rendered in PDF and Word documents. But don’t get too excited. In papaja, table formatting is somewhat limited for Word documents due to missing functionality in pandoc (e.g., it is not possible to have cells or headers span across multiple columns). As required by the APA guidelines, tables are deferred to the final pages of the manuscript when creating a PDF. To place tables and figures in your text instead, set the figsintext parameter in the YAML header to yes or true, as I have done in this document. Again, this is not the case in Word documents due to limited pandoc functionality. The bottom line is, Word documents will be less polished than PDF. The resulting documents should suffice to enable collaboration with Wordy colleagues and prepare a journal submission with limited manual labor. apa_table() extends knitr::kable() Designed to create table designs from the APA manual Does not perform any calculations Can merge multiple data.frame of the same structure contained in a list Much more powerful in PDF documents(see apa_table_example.Rmd) Remember to set chunk option results = &quot;asis&quot;! kableExtra is another powerful alternative 4.3.1 Table captions Table captions can by passing a character string to caption = argument within apa_table function (e.g. apa_table(descriptives, caption = &quot;My table caption&quot;)). However, as with figures we strongly recommend that you use text references—a feature of the bookdown package—instead. A text reference consists of a unique label and the corresponding text that it represents. Text references can be defined as follows: (ref:my-table-caption) This is a caption for my table. The text reference can now be inserted in the chunk options (or anywhere else), e.g. apa_table(descriptives, caption = &quot;my-table-caption&quot;). The use of text references has several advantages: The use of Markdown and \\(\\LaTeX\\) syntax is not well supported in caption =. For example, \\ and _ must be escaped to prevent either R or \\(\\LaTeX\\) from erroring. Moreover, Markdown formatting and citation syntax is not supported at all. None of these limitations apply to text references. Long table captions can impair the readability of the document when they are added directly apa_table() call. Changing text reference does constitute a change to the code chunk and hence does not cause the cache of a chunk to be discarded. Text references can include inline code chunks. We recommend you define the text reference for a table caption just above the corresponding code chunk. This should not occur within a code chunk and the reference and caption should be on the sample line. That is (ref:my-table-caption) This is a caption for my table. Rather than (ref:my-table-caption) This is a caption for my table. 4.3.2 Alternatives Pixidust: https://github.com/nutterb/pixiedust/blob/master/README.md xtable: https://cran.r-project.org/web/packages/xtable/xtable.pdf tables: https://cran.r-project.org/web/packages/tables/vignettes/tables.pdf stargazer: https://cran.r-project.org/web/packages/stargazer/index.html knitr::kable Hmisc::latex https://twitter.com/polesasunder/status/464132152347475968/photo/1 kableExtra: https://cran.r-project.org/web/packages/kableExtra/index.html 4.4 Results from statistical tests Output from statistical models and tests needs to be properly formatted before it can be included in text. For this purpose, we created the function apa_print(). Simply drop the results from a statistical test (e.g. a \\(t\\) test or an ANOVA) into apa_print(), and you will get an output object (a list) that contains all you need to report the analysis according to APA guidelines. apa_print() currently supports output objects from a variety of statistical models/tests, including \\(t\\) tests, ANOVA, linear regression. For a full list of supported output objects, see Table ??. A-B B-H L-S S-Z afex_aov BFBayesFactorList* list summary.aovlist anova BFBayesFactorTop* lm summary.glht* Anova.mlm emmGrid* lsmobj* summary.glm aov glht* summary_emm* summary.lm aovlist glm summary.Anova.mlm summary.ref.grid* BFBayesFactor* htest summary.aov * Not fully tested, don’t trust blindly! Figure 4.5: Process diagram illustrating the use of apa_print() methods and apa_table() to format results from statistical analyses according to APA guidelines. The formatted text and tables can be reported in a manuscript. 4.4.1 htest (t tests, correlations, etc.) The results of a \\(t\\) test (regardless of the exact type of \\(t\\) test) are typically stored in an htest object. # Cosmetic surgery dataset from # Field, A. P., Miles, J., &amp; Field, Z. (2012). Discovering statistics using R. London: Sage. load(&quot;data/cosmetic_surgery.rdata&quot;) t_out &lt;- t.test( x = cosmetic_surgery$Post_QoL , y = cosmetic_surgery$Base_QoL , paired = TRUE ) # Let&#39;s see what the apa_print() output looks like apa_print(t_out) ## $estimate ## [1] &quot;$M_d = -3.95$, 95\\\\% CI $[-4.86$, $-3.04]$&quot; ## ## $statistic ## [1] &quot;$t(275) = -8.52$, $p &lt; .001$&quot; ## ## $full_result ## [1] &quot;$M_d = -3.95$, 95\\\\% CI $[-4.86$, $-3.04]$, $t(275) = -8.52$, $p &lt; .001$&quot; ## ## $table ## NULL As you can see, apa_print() returns a list of four elements: List element estimate contains the sample estimate of mean difference; element statistic contains the result of the NHST with test statistic, dfs, and p value; element full_result contains both information combined. The fourth element, table, contains a table containing test results; while this is NULL for a \\(t\\) test, it will be quiet interesting for ANOVA or linear model results, as you will see in the next subsections. 4.4.2 lm (linear regression) The results of a linear model are stored in an lm object. lm_out &lt;- lm(formula = Post_QoL ~ Base_QoL + BDI, data = cosmetic_surgery) apa_lm &lt;- apa_print(lm_out) Again, apa_print returns a four-elements list. apa_lm$table contains a complete regression table that can be passed to apa_table() to get a full regression table, see Table @ref(tab:lm-table; remember to set the chunk option results = &quot;asis&quot;). apa_table( apa_lm$table , caption = &quot;A full regression table.&quot; , escape = FALSE ) Table 4.2: A full regression table. Predictor \\(b\\) 95% CI \\(t(273)\\) \\(p\\) Intercept 18.50 \\([13.10\\), \\(23.91]\\) 6.74 &lt; .001 Base QoL 0.59 \\([0.50\\), \\(0.67]\\) 13.23 &lt; .001 BDI 0.17 \\([0.11\\), \\(0.22]\\) 6.08 &lt; .001 lm_res &lt;- lm(Post_QoL ~ Base_QoL + BDI, data = cosmetic_surgery) lm_res_apa &lt;- apa_print(lm_res, observed_predictors = TRUE) lm_res_apa$estimate$Intercept ## [1] &quot;$b = 18.50$, 95\\\\% CI $[13.10$, $23.91]$&quot; \\(b = 18.50\\), 95% CI \\([13.10\\), \\(23.91]\\) – lm_res_apa$full_result$modelfit$r2 ## [1] &quot;$R^2 = .50$, 90\\\\% CI $[0.42$, $0.57]$, $F(2, 273) = 136.78$, $p &lt; .001$&quot; \\(R^2 = .50\\), 90% CI \\([0.42\\), \\(0.57]\\), \\(F(2, 273) = 136.78\\), \\(p &lt; .001\\) Tables produced by apa_print() have variable labels lm_res_apa$table ## A data.frame with 5 labelled columns: ## ## predictor estimate ci statistic p.value ## 1 Intercept 18.50 $[13.10$, $23.91]$ 6.74 &lt; .001 ## 2 Base QoL 0.59 $[0.50$, $0.67]$ 13.23 &lt; .001 ## 3 BDI 0.17 $[0.11$, $0.22]$ 6.08 &lt; .001 ## ## predictor: Predictor ## estimate : $b$ ## ci : 95\\% CI ## statistic: $t(273)$ ## p.value : $p$ Tables produced by apa_print() have variable labels variable_labels(lm_res_apa$table) ## $predictor ## [1] &quot;Predictor&quot; ## ## $estimate ## [1] &quot;$b$&quot; ## ## $ci ## [1] &quot;95\\\\% CI&quot; ## ## $statistic ## [1] &quot;$t(273)$&quot; ## ## $p.value ## [1] &quot;$p$&quot; variable_labels(letters) &lt;- &quot;Alphabet&quot; letters[1:15] ## Variable label : Alphabet ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; ## attr(,&quot;class&quot;) ## [1] &quot;papaja_labelled&quot; &quot;character&quot; variable_labels(cars$speed) &lt;- &quot;Speed [m/h]&quot; cars[1:15, &quot;speed&quot;] ## Variable label : Speed [m/h] ## [1] 4 4 7 7 8 9 10 10 10 11 11 12 12 12 12 ## attr(,&quot;class&quot;) ## [1] &quot;papaja_labelled&quot; &quot;numeric&quot; Variable labels can be added to any vector or data.frame variable_labels(cars) &lt;- c( speed = &quot;Speed [m/h]&quot; , dist = &quot;Stopping distance [ft]&quot; ) cars[1:3, ] ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 Variable labels are attributes of the variables that make up the data.frame Conflicting implementations Ours is, in principle, compatible with Hmisc variable_labels(cars$dist) ## [1] &quot;Stopping distance [ft]&quot; cars[1:15, &quot;dist&quot;] ## Variable label : Stopping distance [ft] ## [1] 2 10 4 22 16 10 18 26 34 17 28 14 20 24 28 ## attr(,&quot;class&quot;) ## [1] &quot;papaja_labelled&quot; &quot;numeric&quot; 4.4.2.1 anova (model comparisons) … 4.4.3 anova, Anova, Anova.mlm (Analysis of Variance – ANOVA) Foreword – you can skip this if you are not interested in background. Amongst psychologists, analysis of variance is a still-popular and frequently used technique. In base R, however, analysis of variance is not implemented in a way that is too useful for psychologists, as the aov-function in the stats package does not provide the much sought-after Type-\\(\\rm{I\\!I\\!I}\\) sums-of-squares. A variety of R packages has emerged to fill the gap, e.g. car (Fox &amp; Weisberg, 2011), ez (Lawrence, 2016), and afex (Singmann et al., 2016). Unfortunately, each ANOVA function provides different output objects that need to be digested by apa_print(). To do so, we rely on the package authors to return standardized result objects (i.e., S3/S4 classes). For this reason apa_print() does not support results from the popular ezANOVA(). The object returned by this function has no class to inform us about its contents and, thus, cannot be processed. We recommend you try one of the other available packages, e.g. aov_ez() from the afex-package. Functionality. cosmetic_surgery_anova &lt;- afex::aov_ez( data = cosmetic_surgery , dv = &quot;Post_QoL&quot; , id = &quot;ID&quot; , between = c(&quot;Clinic&quot;, &quot;Gender&quot;) ) apa_anova &lt;- apa_print(cosmetic_surgery_anova) Now, you can report the results of your analyses like so: Clinic (`r apa_anova$full$Clinic`) and patient gender affected post-surgery quality of life, `r apa_anova$full$Gender`. However, the effect of gender differed by clinic, `r apa_anova$full$Clinic_Gender`. Which will yield the following text: Clinic (\\(F(9, 256) = 19.98\\), \\(\\mathit{MSE} = 47.58\\), \\(p &lt; .001\\), \\(\\hat{\\eta}^2_G = .413\\)) and patient gender affected post-surgery quality of life, \\(F(1, 256) = 15.29\\), \\(\\mathit{MSE} = 47.58\\), \\(p &lt; .001\\), \\(\\hat{\\eta}^2_G = .056\\). However, the effect of gender differed by clinic, \\(F(9, 256) = 1.97\\), \\(\\mathit{MSE} = 47.58\\), \\(p = .043\\), \\(\\hat{\\eta}^2_G = .065\\). Again, you can easily create a complete ANOVA table by passing recall_anova_results$table to apa_table(), see . apa_table( apa_anova$table , caption = &quot;A really beautiful ANOVA table.&quot; , note = &quot;Note that the column names contain beautiful mathematical copy: This is because the table has variable labels.&quot; ) Table 4.3: A really beautiful ANOVA table. Effect \\(F\\) \\(\\mathit{df}_1\\) \\(\\mathit{df}_2\\) \\(\\mathit{MSE}\\) \\(p\\) \\(\\hat{\\eta}^2_G\\) Clinic 19.98 9 256 47.58 &lt; .001 .413 Gender 15.29 1 256 47.58 &lt; .001 .056 Clinic \\(\\times\\) Gender 1.97 9 256 47.58 .043 .065 Note. Note that the column names contain beautiful mathematical copy: This is because the table has variable labels. 4.4.3.1 glht, lsmeans, ref.grid (post-hoc tests) … 4.5 Caching expensive computations If R codes take a long time to run, results can be cached ```{r heavy-computation, .highlight[cache = TRUE]}# Imagine computationally expensive R code here ``` my_manuscript_cache directory is created that contains - Computed objects - List of loaded R packages in __packages The next time the chunk is executed If unchanged, cached results are loaded If changed, cache is discarded and code is executed anew – Packages are not reloaded, which cause problems in subsequent uncached chunks Do not include library()-calls in cached chunks! – Load cache into an interactive R session using lazyLoad() If possible at all, avoid caching library()-calls. Subsequent use of functions from these packages in non-cached chunks will throw errors! To avoid incorrect results due to caching, dependencies should be specified ```{r chunk1, cache = TRUE}x &lt;- 5 ``` ```{r chunk2, cache = TRUE, .highlight[dependson = “chunk1”]}x &lt;- x + 5 ``` If code in chunk1 changes, chunk2 is recomputed To avoid incorrect results due to caching, dependencies should be specified knitr::opts_chunk$set(autodep = TRUE) knitr::dep_auto() See knitr cache examples for details Control when cache is discarded Ignore changes to comments knitr::opts_chunk$set(cache.comments = FALSE) Discard cache when random seed changes opts_chunk$set(cache.extra = knitr::rand_seed) I would recommend to always set these options Discard cache if data are modified opts_chunk$set(cache.extra = file.info(&quot;data.csv&quot;)$mtime) Discard cache if the R environment changes opts_chunk$set( cache.extra = list(R.version, sessionInfo()) ) If time permits, always discard all cached results (i.e., delete my_manuscript_cache directory) and reknit the document before submission to ensure that all results are based on the current R code! 4.5.1 Inserting variables before they have been computed R code in R Markdown documents in executed from top to bottom. Hence, variables are not available before the code chunk in which they are defined has been executed. However, sometimes it may be desireable to report a variable in a document before the corresponding code chunk. A common example is to include the sample size or focal test statistics in the abstract. Cached code chunks store their results in a cache database in the subfolder my_document_cache (default). The function knitr::load_cache() can be used to access cache databases and report results of a chunk anywhere in the document. For the following example, we’ll assume that we want to report the sample size in the abstract. The sample size is calculated in the method section: {r, sample-size, cache = TRUE} n &lt;- nrow(cosmetic_surgery) To report this variable in the abstract we need to use an inline code chunk in the YAML front matter field: --- abstract: | This is the abstract. Our sample size was n = `r knitr::load_cache(label = &quot;sample-size&quot;, object = &quot;n&quot;)`. --- When the document is first rendered the object n in the code chunk sample-size has not yet been computed and knitr::load_cache() will insert &quot;NOT AVAILABLE&quot; instead. The next time the document is rendered, the results of the previous run have been saved as cache database. These results will be loaded and inserted into the abstract. For variables computed later in the document, knitr::load_cache() can only ever display the result of the previous run—if the cached code is changed, the document has to be rendered twice to display the new result. References "],
["tips-and-tricks.html", "5 Tips and Tricks 5.1 Global chunk options 5.2 Meaningful chunk names 5.3 Useful RStudio Addins 5.4 Author name disambiguation 5.5 Reproducible software environment 5.6 RStudio 5.7 Splitting an R Markdown document 5.8 Workflow 5.9 Adjusting line spacing 5.10 Best practices 5.11 Troubleshooting", " 5 Tips and Tricks Spell check functionality in RStudio Although often overlooked, RStudio can check your spelling New line for each sentence 5.1 Global chunk options It can be useful to set chunk options globally for all (following) chunks to avoid retyping or copy-and-pasting # Save all plots as 600 DPI TIFF-files knitr::opts_chunk$set(dev = &quot;tiff&quot;, dpi = 600) # Do not evaluate subsequent chunks (debugging or fine-tuning) knitr::opts_chunk$set(eval = FALSE) See the knitr chunk options and package options for an overview of settings 5.2 Meaningful chunk names 5.3 Useful RStudio Addins citr: Insert Markdown Citations remedy: Keyboard shortcuts for Markdown formatting splitChunk: Split R Markdown code chunks gramr: Write-good linter wordcount: Word counts and readability statistics Set up keyboard shortcuts viaTools &gt; Modify keyboard shortcuts Suggested keyboard shortcuts Package Addin Keyboard shortcut citr Insert citation Shift + Alt+R wordcount Word count Shift + Alt+C splitChunk Chunk split Shift + Alt+S remedy Bold Shift + Alt+B Italic Shift + Alt+I Backtick Shift + Alt+P URL Shift + Alt+U statcheck: Extract Statistics from Articles and Recompute p Values retractcheck: Check DOIs in a paper for retractions 5.4 Author name disambiguation As per APA style, citations in papaja documents will be disambiguated if the bibliography file contains multiple authors with the same family but different given names. This can be a nuisance if the bibliographic information is not maintained meticulously. Entries such as author = {John Doe} and author = {J. Doe} are taken to be different authors and will be disambiguated (i.e. “John Doe (1986)” and “J. Doe (1986)”). Disabling author name disambiguation is possible (although it is somewhat beyond the scope of papaja). The definition of the citation style used in papaja is given in a citation style language file (CSL, see [Additional-rendering-options]). We have created a variant of the widely available APA CSL file without author name disambiguation. To use this variant insert the following into YAML front matter: csl: https://tinyurl.com/apa6-no-disambiguation Alternatively, you can download the file and use the location on your hard drive instead of the above URL. Note that using this style can create the false impression that two works are authored by the same author when really they were not. For example, author = {John Doe} and author = {Jane Doe} will be displayed as “Doe (1986a)” and “Doe (1986b)”. If you prefer \\(\\LaTeX\\) to generate the bibliographic information, we recommend the following approach to disable author name disambiguation: lang : &quot;en-EN&quot; # Optional, added for clarity biblio-style : &quot;apa&quot; biblatexoptions : &quot;uniquename=false&quot; header-includes: - \\DeclareLanguageMapping{english}{english-apa} output: papaja::apa6_pdf: citation_package: biblatex Specifying lang is optional in this case, because en-EN is the default. pandoc converts en-EN to english and inserts it into the document preamble. Hence, english needs to be mapped to english-apa. Similarly, if you want, say, British english you would have to adapt the above as follows: lang : &quot;en-GB&quot; # Required header-includes: - \\DeclareLanguageMapping{british}{british-apa} A general drawback to this approach is that biblatex does not operate on any text in the YAML front matter. This can be a problem when, for example, the abstract contains citations. This problem can be addressed with the text references feature in bookdown. Replace the text of the abstract in the YAML front matter by abstract: (ref:abstract) (ref:abstract) is a placeholder for text that you can now define in the body of the R Markdown document (e.g., right after the YAML front matter): (ref:abstract) This is the abstract [@doe1986]. This text will now be processed and citations will be generated as expected. 5.5 Reproducible software environment sessionInfo() packrat checkpoint liftr &amp; docker 5.6 RStudio Document outline RStudio provides a handy document outline view 5.7 Splitting an R Markdown document Some authors may prefer to split long manuscripts into multiple component files for better clarity. There are two basic strategies to split R Markdown documents that can be combined or used in isolation: sourcing R scripts and splitting the R Markdown document. If the R Markdown document contains a lot of code, it may be helpful to disincorporate parts of the code, such as reading, merging, restructuring, and relabeling data files. The R scripts can then be executed at the respective section of the document using source(). Some authors may prefer to split long manuscripts into a master or parent document and multiple children. The master document, for example, consists of the YAML front matter and includes the children, which are themselves R Markdown documents without a YAML front matter. To include a child document, insert an empty chunk and provide the path to the R Markdown document in the chunk option child. It may be preferable to split long documents into multiple files ```{r child = &quot;introduction.Rmd&quot;} ``` ```{r child = &quot;method.Rmd&quot;} ``` ```{r child = &quot;results.Rmd&quot;} ``` ```{r child = &quot;discussion.Rmd&quot;} ``` Search all files with Ctrl + Shift+F 5.8 Workflow Don’t edit raw data Don’t set a working directory Generate graphics from R code Don’t edit word documents Relative paths 5.9 Adjusting line spacing According to the APA guidelines, “Tables may be submitted either single- or double-spaced.” (p. 141; American Psychological Association, 2010). Adjusting the line spacing of table contents is currently not supported in papaja. However, as usual it is possible to adjust the spacing in PDF documents by including additional \\(\\LaTeX\\) code. If you use apa_table(), including the following in the YAML front matter will result in single-spaced tables with double-spaced caption and table note: header-includes: - \\usepackage{setspace} - \\AtBeginEnvironment{tabular}{\\singlespacing} - \\AtBeginEnvironment{lltable}{\\singlespacing} - \\AtBeginEnvironment{tablenotes}{\\doublespacing} - \\captionsetup[table]{font={stretch=1.5}} - \\captionsetup[figure]{font={stretch=1.5}} Similarly, the line spacing of figure captions can be adjusted as follows: header-includes: - \\usepackage{setspace} - \\AtBeginEnvironment{tabular}{\\doublespacing} - \\AtBeginEnvironment{lltable}{\\doublespacing} - \\AtBeginEnvironment{tablenotes}{\\doublespacing} - \\captionsetup[table]{font={stretch=1.5}} - \\captionsetup[figure]{font={stretch=1}} 5.9.1 Comparing documents In revisions, it can be helpful to highlight all changes - for DOCX, use the Microsoft Word combine feature - for PDF, use latexdiff on \\(\\LaTeX\\) source documents 1. Create \\(\\LaTeX\\) file with highlighted changes 2. Compile to PDF in RStudio 5.9.2 Counting words wordcount RStudio addin counts words in R Markdown documents Rough estimate; cannot, for example, count rendered citations Good for quick use texcount Counts words in TeX documents More precise and informative Microsoft Word word count If you are using pandoc-citeproc for references, exclude the reference section before counting words 5.10 Best practices Load all R packages in the first code chunk Never include install.packages() Set a seed for random number generators(e.g., set.seed()) Never use setwd()! Use relative paths or load files from a permanent location Use meaningful chunk names Keep R code close to the corresponding prose Document R and R-package versions(e.g., devtools::session_info()) Make sure you can knit without errors before going home 5.11 Troubleshooting 5.11.1 R Fixing bugs in R Markdown documents can be challenging The code is run in a new non-interactive R session Try is to recreate the problem in your interactive session Restart R (Session &gt; Restart R orCtrl + Shift + F10) Run all chunks (Ctrl + Alt + R) Compare the working directories (e.g., use getwd() in a code chunk) References "],
["collaborative-writing.html", "6 Collaborative writing", " 6 Collaborative writing "],
["published-manuscripts.html", "7 Published manuscripts", " 7 Published manuscripts Although papaja is not yet on CRAN and is still undergoing a lot of changes, there are peer-reviewed publications that use it. If you have published a paper that was written with papaja, you can add the reference to the public Zotero group yourself or send it to me. Aust, F., &amp; Edwards, J. D. (2016). Incremental validity of Useful Field of View subtests for the prediction of instrumental activities of daily living. Journal of Clinical and Experimental Neuropsychology, 38(5), 497–515. https://doi.org/10.1080/13803395.2015.1125453 Aust, F., Haaf, J. M., &amp; Stahl, C. (2018). A memory-based judgment account of expectancy-liking dissociations in evaluative conditioning. Journal of Experimental Psychology: Learning, Memory, and Cognition. https://doi.org/10/gdxv8n (R Markdown and data files: https://osf.io/vnmby/) Barth, M., Stahl, C., &amp; Haider, H. (2018). Assumptions of the process-dissociation procedure are violated in implicit sequence learning. Journal of Experimental Psychology: Learning, Memory, and Cognition. https://doi.org/10/gdxv8m (R Markdown and data files: https://github.com/methexp/pdl2) Beaton, D., Sunderland, K. M., Levine, B., Mandzia, J., Masellis, M., Swartz, R. H., … Strother, S. C. (2018). Generalization of the minimum covariance determinant algorithm for categorical and mixed data types. bioRxiv. https://doi.org/10.1101/333005 Bergmann, C., Tsuji, S., Piccinini, P. E., Lewis, M. L., Braginsky, M., Frank, M. C., &amp; Cristia, A. (2018). Promoting Replicability in Developmental Research Through Meta-analyses: Insights From Language Acquisition Research. Child Development. https://doi.org/10.1111/cdev.13079 (R Markdown and data files: https://osf.io/uhv3d/) Bol, N., Dienlin, T., Kruikemeier, S., Sax, M., Boerman, S. C., Strycharz, J., … de Vreese, C. H. (2018). Understanding the Effects of Personalization as a Privacy Calculus: Analyzing Self-Disclosure Across Health, News, and Commerce Contexts†. Journal of Computer-Mediated Communication, 23(6), 370–388. https://doi.org/10/gftcm6 Buchanan, E., Foreman, R., Johnson, B., Pavlacic, J., Swadley, R., &amp; Schulenberg, S. (2018). Does the Delivery Matter? Examining Randomization at the Item Level. PsyArXiv. https://doi.org/10.17605/osf.io/p93df (R Markdown and data files: https://osf.io/gvx7s/) Buchanan, E., Johnson, B., Miller, A., Stockburger, D., &amp; Beauchamp, M. (2018a). Perceived Grading and Student Evaluation of Instruction. PsyArXiv. https://doi.org/10.17605/osf.io/7x4uf (R Markdown and data files: https://osf.io/jdpfs/) Buchanan, E. M., &amp; Scofield, J. E. (2018). Methods to detect low quality data and its implication for psychological research. Behavior Research Methods. https://doi.org/10.3758/s13428-018-1035-6 (R Markdown and data files: https://osf.io/x6t8a/) Buchanan, E., &amp; Scofield, J. (2018). Bulletproof Bias? Considering the Type of Data in Common Proportion of Variance Effect Sizes. PsyArXiv. https://doi.org/10.17605/osf.io/cs4vy (R Markdown and data files: https://osf.io/urd8q/) Buchanan, E., Scofield, J., &amp; Nunley, N. (2018b). The N400’s 3 As: Association, Automaticity, Attenuation (and Some Semantics Too). PsyArXiv. https://doi.org/10.17605/osf.io/6w2se (R Markdown and data files: https://osf.io/h5sd6/) Buchanan, E., &amp; Valentine, K. (2018). An Extension of the QWERTY Effect: Not Just the Right Hand, Expertise and Typability Predict Valence Ratings of Words. PsyArXiv. https://doi.org/10.31219/osf.io/k7dx5 (R Markdown and data files: https://osf.io/zs2qj/) Buchanan, E., Valentine, K., &amp; Maxwell, N. (2018c). English Semantic Feature Production Norms: An Extended Database of 4,436 Concepts. PsyArXiv. https://doi.org/10.17605/osf.io/gxbf4 (R Markdown and data files: https://osf.io/cjyzw/) Buchanan, E., Valentine, K., &amp; Maxwell, N. (2018d). The LAB: Linguistic Annotated Bibliography. PsyArXiv. https://doi.org/10.17605/osf.io/h3bwx (R Markdown and data files: https://osf.io/9bcws/) Craddock, M., Klepousniotou, E., El-Deredy, W., Poliakoff, E., &amp; Lloyd, D. M. (2018). Transcranial alternating current stimulation at 10 Hz modulates response bias in the Somatic Signal Detection Task. bioRxiv. https://doi.org/10.1101/330134 Derringer, J. (2018). A simple correction for non-independent tests. PsyArXiv. https://doi.org/10/gdrbxc (R Markdown and data files: https://osf.io/re5w2/) Faulkenberry, T. J., Cruise, A., &amp; Shaki, S. (2018). Task instructions modulate unit–decade binding in two-digit number representation. Psychological Research. https://doi.org/10/gdxv8k (R Markdown and data files: https://github.com/tomfaulkenberry/twodigittaskmanip) Flygare, O., Andersson, E., Ringberg, H., Hellstadius, A.-C., Edbacken, J., Enander, J., … Rück, C. (2018). Adapted cognitive behavior therapy for obsessive compulsive disorder with co-occuring autism spectrum disorder: A clinical effectiveness study. PsyArXiv. https://doi.org/10/gffjrb (R Markdown and data files: https://osf.io/gj87z/) Haaf, J. M., Klaassen, F., &amp; Rouder, J. (2018). A Note on Using Systems of Orders to Capture Theoretical Constraint in Psychological Science. PsyArXiv. https://doi.org/10/gffjrf (R Markdown and data files: https://github.com/perceptionandcognitionlab/bf-order) Haaf, J. M., &amp; Rouder, J. (2018). Some do and some don’t? Accounting for variability of individual difference structures. PsyArXiv. https://doi.org/10.31234/osf.io/zwjtp (R Markdown and data files: https://github.com/perceptionandcognitionlab/ctx-mixture) Haaf, J. M., &amp; Rouder, J. N. (2017). Developing constraint in bayesian mixed models. Psychological Methods, 22(4), 779–798. https://doi.org/10.1037/met0000156 (R Markdown and data files: https://github.com/perceptionandcognitionlab/ctx-indiff) Hardwicke, T. E., Mathur, M. B., MacDonald, K., Nilsonne, G., Banks, G. C., Kidwell, M. C., … Frank, M. C. (2018). Data availability, reusability, and analytic reproducibility: Evaluating the impact of a mandatory open data policy at the journal cognition. Royal Society Open Science, 5(8), 180448. https://doi.org/10/gdz63s (R Markdown and data files: https://osf.io/wn8fd/) Hardwicke, T., &amp; Ioannidis. (2018). Mapping the Universe of Registered Reports. PsyArXiv. https://doi.org/10.31222/osf.io/fzpcy (R Markdown and data files: https://osf.io/7dpwb/) Harms, C., &amp; Lakens, D. (2018). Making ’Null Effects’ Informative: Statistical Techniques and Inferential Frameworks. PsyArXiv. https://doi.org/10.17605/osf.io/48zca (R Markdown and data files: https://osf.io/wptju/) Heino, M. T. J., Vuorre, M., &amp; Hankonen, N. (2018). Bayesian evaluation of behavior change interventions: A brief introduction and a practical example. Health Psychology and Behavioral Medicine, 6(1), 49–78. https://doi.org/10.1080/21642850.2018.1428102 (R Markdown and data files: https://zenodo.org/record/1209814\\#.wvy3h4jovgm) Heycke, T., Aust, F., &amp; Stahl, C. (2017). Subliminal influence on preferences? A test of evaluative conditioning for brief visual conditioned stimuli using auditory unconditioned stimuli. Royal Society Open Science, 4(9), 160935. https://doi.org/10.1098/rsos.160935 Heycke, T., Gehrmann, S., Haaf, J. M., &amp; Stahl, C. (2018). Of two minds or one? A registered replication of Rydell et al. (2006). Cognition and Emotion, 32(8), 1708–1727. https://doi.org/10.1080/02699931.2018.1429389 Heycke, T., &amp; Stahl, C. (2018). No evaluative conditioning effects with briefly presented stimuli. Psychological Research. https://doi.org/10.1007/s00426-018-1109-1 Heyman, T., &amp; Heyman, G. (2018). Can prediction-based distributional semantic models predict typicality? PsyArXiv. https://doi.org/10.17605/osf.io/59xtd (R Markdown and data files: https://osf.io/nkfjy/) Jordan, K., Buchanan, E., &amp; Padfield, W. (2018). Focus on the Target: The Role of Attentional Focus in Decisions about War. PsyArXiv. https://doi.org/10.17605/osf.io/9fgu8 (R Markdown and data files: https://osf.io/r8qp2/) Lakens, D., Scheel, A. M., &amp; Isager, P. M. (2018). Equivalence Testing for Psychological Research: A Tutorial. Advances in Methods and Practices in Psychological Science, 1(2), 259–269. https://doi.org/10/gdj7s9 (R Markdown and data files: https://osf.io/qamc6/) Lewis, M., Braginsky, M., Tsuji, S., Bergmann, C., Piccinini, P. E., Cristia, A., &amp; Frank, M. C. (2017). A Quantitative Synthesis of Early Language Acquisition Using Meta-Analysis. PsyArXiv. https://doi.org/10.31234/osf.io/htsjm Maxwell, N., &amp; Buchanan, E. (2018a). Investigating the Interaction between Associative, Semantic, and Thematic Database Norms for Memory Judgments and Retrieval. PsyArXiv. https://doi.org/10.17605/osf.io/fcesn (R Markdown and data files: https://osf.io/y8h7v/) Maxwell, N., &amp; Buchanan, E. (2018b). Modeling Memory: Exploring the Relationship Between Word Overlap and Single Word Norms when Predicting Relatedness Judgments and Retrieval. PsyArXiv. https://doi.org/10.17605/osf.io/qekad (R Markdown and data files: https://osf.io/j7qtc/) McHugh, C., McGann, M., Igou, E. R., &amp; Kinsella, E. L. (2017). Searching for Moral Dumbfounding: Identifying Measurable Indicators of Moral Dumbfounding. Collabra: Psychology, 3(1). https://doi.org/10.1525/collabra.79 (R Markdown and data files: https://osf.io/wm6vc/) Moors, P., &amp; Hesselmann, G. (2019). Unconscious arithmetic: Assessing the robustness of the results reported by Karpinski, Briggs, and Yale (2018). Consciousness and Cognition, 68, 97–106. https://doi.org/10.1016/j.concog.2019.01.003 (R Markdown and data files: https://osf.io/cybfe/) Papenberg, M., Willing, S., &amp; Musch, J. (2017). Sequentially presented response options prevent the use of testwiseness cues in multiple-choice testing. Psychological Test and Assessment Modeling, 59(2), 245–266. Retrieved from http://www.psychologie-aktuell.com/fileadmin/download/ptam/2-2017_20170627/06_Papenberg_.pdf Pavlacic, J., Buchanan, E., Maxwell, N., Hopke, T., &amp; Schulenberg, S. (2018). A Meta-Analysis of Expressive Writing on Positive Psychology Variables and Traumatic Stress. PsyArXiv. https://doi.org/10.17605/osf.io/u98cw (R Markdown and data files: https://osf.io/4mjqt/) Peterka-Bonetta, J., Sindermann, C., Sha, P., Zhou, M., &amp; Montag, C. (2019). The relationship between Internet Use Disorder, depression and burnout among Chinese and German college students. Addictive Behaviors, 89, 188–199. https://doi.org/10/gd4rcw Pollet, T. V., &amp; Saxton, T. (2018). How diverse are the samples used in the journals “Evolution &amp; Human Behavior” and “Evolutionary Psychology”? PsyArXiv. https://doi.org/10.17605/osf.io/7h24p Robison, M. K., &amp; Unsworth, N. (2018). Pupillometry tracks fluctuations in working memory performance. PsyArXiv. https://doi.org/10/gdz63r (R Markdown and data files: osf.io/vuw9h/) Rouder, J., &amp; Haaf, J. M. (2018). A Psychometrics of Individual Differences in Experimental Tasks. PsyArXiv. https://doi.org/10/gfdbw2 (R Markdown and data files: https://github.com/perceptionandcognitionlab/ctx-reliability) Rouder, J., Haaf, J. M., &amp; Snyder, H. K. (2018a). Minimizing Mistakes In Psychological Science. PsyArXiv. https://doi.org/10/gfdb27 (R Markdown and data files: https://github.com/perceptionandcognitionlab/lab-transparent) Rouder, J., Haaf, J. M., Stober, C., &amp; Hilgard, J. (2017). Beyond Overall Effects: A Bayesian Approach to Finding Constraints Across A Collection Of Studies In Meta-Analysis. PsyArXiv. https://doi.org/10/gffjrd (R Markdown and data files: https://github.com/perceptionandcognitionlab/meta-planned) Rouder, J. N., Haaf, J. M., &amp; Aust, F. (2018b). From theories to models to predictions: A Bayesian model comparison approach. Communication Monographs, 85(1), 41–56. https://doi.org/10.1080/03637751.2017.1394581 Sauer, S. (2017). Observation oriented modeling revised from a statistical point of view. Behavior Research Methods. https://doi.org/10.3758/s13428-017-0949-8 (R Markdown and data files: https://osf.io/6vhja/) Stahl, C., Barth, M., &amp; Haider, H. (2015). Distorted estimates of implicit and explicit learning in applications of the process-dissociation procedure to the SRT task. Consciousness and Cognition, 37, 27–43. https://doi.org/10.1016/j.concog.2015.08.003 Stahl, C., Haaf, J., &amp; Corneille, O. (2016a). Subliminal Evaluative Conditioning? Above-Chance CS Identification May Be Necessary and Insufficient for Attitude Learning. Journal of Experimental Psychology: General, 145, 1107–1131. https://doi.org/10.1037/xge0000191 Stahl, C., Henze, L., &amp; Aust, F. (2016b). False memory for perceptually similar but conceptually distinct line drawings. PsyArXiv. https://doi.org/10.17605/osf.io/zr7m8 (R Markdown and data files: https://osf.io/jxm7z/) Stahl, C., &amp; Heycke, T. (2016). Evaluative Conditioning with Simultaneous and Sequential Pairings Under Incidental and Intentional Learning Conditions. Social Cognition, 34(5), 382–412. https://doi.org/10.1521/soco.2016.34.5.382 Stevens, J. R., &amp; Soh, L.-K. (2018). Predicting similarity judgments in intertemporal choice with machine learning. Psychonomic Bulletin &amp; Review, 25(2), 627–635. https://doi.org/10/gdfghk Urry, H. L., Sifre, E., Song, J., Steinberg, H., Bornstein, M., Kim, J., … Andrews, M. (2018). Effect of Disgust on Judgments of Moral Wrongness: A Replication of Eskine, Kacinik, and Prinz (2011). At Tufts University - Spring, 2017. Retrieved from https://osf.io/fu384/ (R Markdown and data files: https://osf.io/ddmkm) Valentine, K., Buchanan, E., Scofield, J., &amp; Beauchamp, M. (2018). Beyond p-values: Utilizing Multiple Estimates to Evaluate Evidence. PsyArXiv. https://doi.org/10.17605/osf.io/9hp7y (R Markdown and data files: https://osf.io/u9hf4/) Vuorre, M., &amp; Curley, J. P. (2018). Curating Research Assets: A Tutorial on the Git Version Control System. PsyArXiv. https://doi.org/10.31234/osf.io/6tzh8 (R Markdown and data files: https://github.com/mvuorre/reproguide-curate) "],
["limitations.html", "8 Limitations 8.1 PDF documents 8.2 Microsoft Word documents", " 8 Limitations As outlined in Document compilation, papaja builds on pandoc to render Markdown into PDF and DOCX documents. Markdown provides good common basis for these and other document types but the common basis necessarily limits the degree of control that can be exerted over the rendered document. For example, there is currently no way to generate tables with pandoc in which cells span multiple rows or columns. Similarly, it is not possible to insert page breaks into a document. Both of these limitations have been raised with the developers of pandoc (see here and here), but it may take a while for them to be addressed. 8.1 PDF documents pandoc builds on LaTeX to render PDF documents. As discussed in Markdown text formatting, when the R Markdown document contains LaTeX code it is kept as-is and can be used to exert greater control over the final result. For example, to create a page break in the rendered document you can use the LaTeX command \\pagebreak. Similarly, tables with column spanners can be created by using the corresponding LaTeX code. Hence, the limited control offered by pandoc can be compensated by using LaTeX code and papaja resorts to this approach, for example, in apa_table(). 8.1.1 Customizing the document preamble You can exert further control over your PDF documents by customizing the LaTeX preamble. Consider the following example: By default, LaTeX arranges paragraphs and section headings so that they fill the page. This can sometimes lead to unwanted vertical spacing, Figure 8.1. Figure 8.1: An example of large vertical spacing between paragraphs and section headings in a rendered PDF document kindly provided by John Sakaluk. If you prefer white space at the bottom of the page, rather than between paragraphs, you can overwrite this default behavior by including \\raggedbottom in the document preamble. To do so, add the following to the YAML front matter of your document: header-includes: - \\raggedbottom 8.2 Microsoft Word documents In contrast, there is no simple way to compensate for the limited control offered by pandoc when rendering Microsoft Word documents. This is the reason why some of papaja’s features are only available if the to-be-rendered document is in PDF format, such as some Rendering options and some features of apa_table() (see Tables). More over, rendered documents in DOCX format require some manual work before they fully comply with APA guidelines. We, therefore, provide the following checklist of necessary changes: Always, add a header line with running head and page number If necessary, position author note at the bottom of page 1 move figures and tables to the end of the manuscript add colon to level 3-headings in figure captions, add a colon following the figure numbers and italicize(e.g. “Figure 1. This is a caption.”) in tables, add horizontal rules above the first and below the last row add midrules We hope to automated some of these points in the future as the flexibility of pandoc increases. "],
["future-directions.html", "9 Future directions 9.1 Contributions", " 9 Future directions 9.1 Contributions Like papaja and want to contribute? Take a look at the open issues if you need inspiration. Other than that, there are many output objects from analysis methods that we would like apa_print() to support. Any new S3-methods for this function are always appreciated (e.g., factanal, fa, lavaan, lmer, glmer). 9.1.1 Workflow A note on commit messages: http://chris.beams.io/posts/git-commit/ "],
["references.html", "References", " References "]
]
